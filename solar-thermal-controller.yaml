#https://www.waveshare.com/wiki/ESP32-C6-LCD-1.47#Schematic_diagram
esphome:
  name: solar-thermal-controller
  friendly_name: Solar Thermal Controller
  project:
    name: "Waveshare.ESP32-C6-LCD-1-47in"
    version: "v"
  platformio_options:
    board_build.flash_mode: dio
#    build_flags:
#      - "-DI2C_NUM_1=I2C_NUM_0"
#      - "-DBOARD_HAS_PSRAM"
#      - "-Wl,-Map,output.map"
    board_build.arduino.memory_type: qio_opi
#    platform_packages:
#      - platformio/toolchain-xtensa-esp-elf @ 14.2.0+20241119
  on_boot:
    priority: -10
    then:
      - lambda: |-
          id(collector_min).publish_state(6.7);   // high start value initially 30
          id(collector_max).publish_state(90.6);  // low start value initially 10
          id(tank_top_temp_min).publish_state(37.3);   // high start value initially 50
          id(tank_top_temp_max).publish_state(61.2);  // low start value initially 40
          id(tank_bottom_temp_min).publish_state(17.4);   // high start value initially 30
          id(tank_bottom_temp_max).publish_state(48.5);  // low start value initially 10

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "6MD8R8i8BYzVSQnshvHmuoe3kpOepQrlqdiay0yRY7A="

ota:
  - platform: esphome
    password: "f3c08e26d9e818051c9f7d1727c3242b"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Solar-Thermal-Controller"
    password: "u94lCk6YoYzU"

captive_portal:

packages:
  # Harware description file
  hardware: !include modules/hardware/waveshare-ESP32-C6-LCD-1.47.yaml

# --- PT1000 sensors via MAX31865 ---
sensor:
  - platform: max31865
    name: "Solar Panel"
    cs_pin: GPIO18
    spi_id: max31865_spi
    reference_resistance: 4300.0
    rtd_nominal_resistance: 1000.0
    update_interval: 10s
    id: collector_temp
  - platform: max31865
    name: "DHW Top"
    cs_pin: GPIO19
    spi_id: max31865_spi
    reference_resistance: 4300.0
    rtd_nominal_resistance: 1000.0
    update_interval: 10s
    id: tank_top_temp
  - platform: max31865
    name: "DHW Bottom"
    cs_pin: GPIO20
    spi_id: max31865_spi
    reference_resistance: 4300.0
    rtd_nominal_resistance: 1000.0
    update_interval: 10s
    id: tank_bottom_temp

   # A template sensor to store the maximum value
  - platform: template
    name: "Solar Min"
    unit_of_measurement: "°C"
    device_class: "temperature"
    id: collector_min
  - platform: template
    name: "DHW Top Min"
    unit_of_measurement: "°C"
    device_class: "temperature"
    id: tank_top_temp_min
  - platform: template
    name: "DHW Bottom Min"
    unit_of_measurement: "°C"
    device_class: "temperature"
    id: tank_bottom_temp_min

   # A template sensor to store the maximum value
  - platform: template
    name: "Solar Max"
    unit_of_measurement: "°C"
    device_class: "temperature"
    id: collector_max
  - platform: template
    name: "DHW Top Max"
    unit_of_measurement: "°C"
    device_class: "temperature"
    id: tank_top_temp_max
  - platform: template
    name: "DHW Bottom Max"
    unit_of_measurement: "°C"
    device_class: "temperature"
    id: tank_bottom_temp_max
  
    #https://esphome.io/components/sensor/dallas_temp/
  - platform: dallas_temp
    address: 0x14000000b93b2d28
    name: "Solar In"
    id: solar_in
    update_interval: 10s
  - platform: dallas_temp
    address: 0x70000000b4f16328
    name: "Solar Out"
    id: solar_out
    update_interval: 10s
         
    #ΔQ = m° Cp ΔT.
    #ΔQ = Rate of heat transfer (kW)
    #m° = Mass flow rate (kg/s or LPS)
    #ΔT = Temperature difference in Kelvin
    #Cp = Specific heat at constant pressure (kJ/kg K) 4.184 J⋅kg−1⋅K−1.
  - platform: template
    name: "KW Q Solar"
    id: kw_solar
    unit_of_measurement: 'kW'
    device_class: power
    state_class: measurement
    lambda: |-
      float flow_rate = 3.0 / 60.0; 
      float cp = 4.184;
      float in = id(solar_in).state;
      float out = id(solar_out).state;
      if (id(solar_pump).state) {
        return flow_rate * cp * (in - out);
      } else {
        return 0.0;
      }
    update_interval: 10s

binary_sensor:
  - platform: homeassistant
    name: "Oscar Motion"
    id: oscar_motion
    entity_id: binary_sensor.oscar_motion_occupancy
    filters:
      - delayed_off: 60s
    on_press:
      then:
        - light.turn_on: backlight_light
    on_release:
      then:
        - light.turn_off: backlight_light

# --- Pump relay output ---
switch:
  - platform: gpio
    pin: GPIO23
    name: "Solar Pump"
    id: solar_pump
    icon: "mdi:pump"
    restore_mode: ALWAYS_OFF

  - platform: template
    name: Antiburn
    id: switch_antiburn
    icon: mdi:television-shimmer
    optimistic: true
    entity_category: "config"
    turn_on_action:
      - logger.log: "Starting Antiburn"
      - if:
          condition: 
            and: 
              - lvgl.is_paused
              - light.is_on: backlight_light
          then:
            - lvgl.resume:
            - lvgl.widget.redraw:
            - light.turn_on:
                id: backlight_light
                brightness: 10%
      - lvgl.pause:
          show_snow: true
    turn_off_action:
      - logger.log: "Stopping Antiburn"
      - if:
          condition: 
            and:
              - lvgl.is_paused
              - light.is_on: backlight_light
          then:
            - lvgl.resume:
            - lvgl.widget.redraw: 
            - light.turn_on:
                id: backlight_light
                brightness: 40%

lvgl:
  - id: lvgl_display
    displays:
      - main_display    
    style_definitions:
      - id: temperature_style     
        text_font: roboto_icons_42
        align: center
        text_color: 0xFFFFFF
      - id: minmax_style     
        text_font: montserrat_16
        align: center
        text_color: 0x800080 
    disp_bg_color: 0x000000
    buffer_size: 12%
    pages:
    - id: main_page 
      bg_color: 0x000000
      bg_opa: transp
      widgets:
        # Collector Gauge
        - label:
            id: collector_label
            text: "--.-\u00B0C"
            styles: temperature_style
            y: -13
        - label:
            id: collector_minmax_label
            text: "--.-\u00B0C"
            styles: minmax_style
            y: 12

        # Tank Top Gauge
        - label:
            id: tank_top_label
            text: "--.-\u00B0C"
            styles: temperature_style
            y: -70
        - label:
            id: tank_top_minmax_label
            text: "--.-\u00B0C"
            styles: minmax_style
            y: -45

        # Tank Bottom Gauge
        - label:
            id: tank_bottom_label
            text: "--.-\u00B0C"
            styles: temperature_style
            y: 50
        - label:
            id: tank_bottom_minmax_label
            text: "--.-\u00B0C"
            styles: minmax_style
            y: 75

interval:
  - interval: 1s
    then:
      - lvgl.label.update:
          id: collector_label
          text: !lambda |-
            return str_sprintf("\U000F1A73 %.1f\u00B0C", id(collector_temp).state);
      - lvgl.label.update:
          id: collector_minmax_label
          text: !lambda |-
              return str_sprintf("Min %.1f\u00B0C ", id(collector_min).state) + str_sprintf("Max %.1f\u00B0C ", id(collector_max).state);
      - lvgl.label.update:
          id: tank_top_label
          text: !lambda |-
            return str_sprintf("Tank \U000F0739 %.1f\u00B0C", id(tank_top_temp).state);
      - lvgl.label.update:
          id: tank_top_minmax_label
          text: !lambda |-
              return str_sprintf("Min %.1f\u00B0C ", id(tank_top_temp_min).state) + str_sprintf("Max %.1f\u00B0C ", id(tank_top_temp_max).state);
      - lvgl.label.update:
          id: tank_bottom_label
          text: !lambda |-
            return str_sprintf("Tank \U000F0730 %.1f\u00B0C", id(tank_bottom_temp).state);
      - lvgl.label.update:
          id: tank_bottom_minmax_label
          text: !lambda |-
              return str_sprintf("Min %.1f\u00B0C ", id(tank_bottom_temp_min).state) + str_sprintf("Max %.1f\u00B0C ", id(tank_bottom_temp_max).state);

# 24/09/25 - Changed from 7.0 to 6.0 temp for on and added delay pump off
# --- Pump control logic ---
  - interval: 10s
    then:
      - if:
          condition:
            lambda: |-
              return (id(collector_temp).state - id(tank_bottom_temp).state > 6.0) && id(tank_top_temp).state < 65.0;
          then:
            - switch.turn_on: solar_pump
      - if:
          condition:
            and:
              - lambda: |-
                  return (id(collector_temp).state - id(tank_bottom_temp).state < 3.0) || id(tank_top_temp).state >= 65.0;
              - for:
                  time: 40s
                  condition:
                    switch.is_on: solar_pump
          then:
            - switch.turn_off: solar_pump
      - lambda: |-
          float tank_top = id(tank_top_temp).state;
          float solar_panel = id(collector_temp).state;
          float tank_bottom = id(tank_bottom_temp).state;
          if (solar_panel > id(collector_max).state) {
            id(collector_max).publish_state(solar_panel);
          }
          if (solar_panel < id(collector_min).state) {
            id(collector_min).publish_state(solar_panel);
          }
          if (tank_top > id(tank_top_temp_max).state) {
            id(tank_top_temp_max).publish_state(tank_top);
          }
          if (tank_top < id(tank_top_temp_min).state) {
            id(tank_top_temp_min).publish_state(tank_top);
          }
          if (tank_bottom > id(tank_bottom_temp_max).state) {
            id(tank_bottom_temp_max).publish_state(tank_bottom);
          }
          if (tank_bottom < id(tank_bottom_temp_min).state) {
            id(tank_bottom_temp_min).publish_state(tank_bottom);
          }
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0,30
        then:
          - switch.turn_on: switch_antiburn
      - seconds: 7,37
        then:
          - switch.turn_off: switch_antiburn
            
font:
  - file: "fonts/RobotoCondensed-Regular.ttf"
    id: roboto_icons_42
    size: 28
    bpp: 4
    extras:
      - file: "fonts/materialdesignicons-webfont.ttf"
        glyphs: [
          "\U000F1A73", # solar panel
          "\U000F0739", # up
          "\U000F0730", # down
          ]      
